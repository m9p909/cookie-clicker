{"version":3,"sources":["contract/address.js","contract/execute.js","contract/query.js","components/ConnectWallet.js","App.js","reportWebVitals.js","index.js"],"names":["contractAdress","wallet","config","network","name","counter","contractAddresses","default","sleep","ms","Promise","resolve","setTimeout","until","Date","now","untilInterval","_exec","msg","fee","Fee","uluna","a","lcd","LCDClient","URL","chainID","post","msgs","MsgExecuteContract","walletAddress","result","tx","txInfo","txhash","Error","increment","getCount","wasm","contractQuery","get_count","ConnectWallet","useWallet","status","availableConnectTypes","availableInstallTypes","connect","install","disconnect","WalletStatus","WALLET_NOT_CONNECTED","map","connectType","onClick","type","WALLET_CONNECTED","App","useState","count","setCount","updating","setUpdating","connectedWallet","useConnectedWallet","useEffect","prefetch","query","onClickIncrement","execute","className","style","display","motion","button","whileTap","scale","src","height","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getChainOptions","chainOptions","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b539ad6.chunk.js","sourcesContent":["// sync-ed from root via `tr sync-refs`\nimport config from \"../refs.terrain.json\"\nexport const contractAdress = (wallet) => config[wallet.network.name].counter.contractAddresses.default\n","import { LCDClient, MsgExecuteContract, Fee } from \"@terra-money/terra.js\";\nimport { contractAdress } from \"./address\";\n\n// ==== utils ====\n\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\nconst until = Date.now() + 1000 * 60 * 60;\nconst untilInterval = Date.now() + 1000 * 60;\n\nconst _exec =\n  (msg, fee = new Fee(200000, { uluna: 10000 })) =>\n  async (wallet) => {\n    const lcd = new LCDClient({\n      URL: wallet.network.lcd,\n      chainID: wallet.network.chainID,\n    });\n\n    const { result } = await wallet.post({\n      fee,\n      msgs: [\n        new MsgExecuteContract(\n          wallet.walletAddress,\n          contractAdress(wallet),\n          msg\n        ),\n      ],\n    });\n\n    while (true) {\n      try {\n        return await lcd.tx.txInfo(result.txhash);\n      } catch (e) {\n        if (Date.now() < untilInterval) {\n          await sleep(500);\n        } else if (Date.now() < until) {\n          await sleep(1000 * 10);\n        } else {\n          throw new Error(\n            `Transaction queued. To verify the status, please check the transaction hash: ${result.txhash}`\n          );\n        }\n      }\n    }\n  };\n\n// ==== execute contract ====\n\nexport const increment = _exec({ increment: {} });\n\nexport const reset = async (wallet, count) =>\n  _exec({ reset: { count } })(wallet);\n","import { LCDClient } from '@terra-money/terra.js'\nimport { contractAdress } from './address'\n\nexport const getCount = async (wallet) => {\n  const lcd = new LCDClient({\n    URL: wallet.network.lcd,\n    chainID: wallet.network.chainID,\n  })\n  return lcd.wasm.contractQuery(contractAdress(wallet), { get_count: {} })\n}\n","import { useWallet, WalletStatus } from '@terra-dev/use-wallet'\n\nexport const ConnectWallet = () => {\n  const {\n    status,\n    availableConnectTypes,\n    availableInstallTypes,\n    connect,\n    install,\n    disconnect,\n  } = useWallet()\n\n  return (\n    <div>\n      {status === WalletStatus.WALLET_NOT_CONNECTED && (\n        <>\n          {availableInstallTypes.map((connectType) => (\n            <button\n              key={`install-${connectType}`}\n              onClick={() => install(connectType)}\n              type=\"button\"\n            >\n              Install {connectType}\n            </button>\n          ))}\n          {availableConnectTypes.map((connectType) => (\n            <button\n              key={`connect-${connectType}`}\n              onClick={() => connect(connectType)}\n              type=\"button\"\n            >\n              Connect {connectType}\n            </button>\n          ))}\n        </>\n      )}\n      {status === WalletStatus.WALLET_CONNECTED && (\n        <button onClick={() => disconnect()} type=\"button\">\n          Disconnect\n        </button>\n      )}\n    </div>\n  )\n}\n","import './App.css'\n\nimport { useEffect, useState } from 'react'\nimport {\n  useWallet,\n  useConnectedWallet,\n  WalletStatus,\n} from '@terra-money/wallet-provider'\nimport { motion } from 'framer-motion'\n\nimport * as execute from './contract/execute'\nimport * as query from './contract/query'\nimport { ConnectWallet } from './components/ConnectWallet'\n\nfunction App() {\n  const [count, setCount] = useState(null)\n  const [updating, setUpdating] = useState(true)\n  const [resetValue, setResetValue] = useState(0)\n\n  const { status } = useWallet()\n\n  const connectedWallet = useConnectedWallet()\n\n  useEffect(() => {\n    const prefetch = async () => {\n      if (connectedWallet) {\n        setCount((await query.getCount(connectedWallet)).count)\n      }\n      setUpdating(false)\n    }\n    prefetch()\n  }, [connectedWallet])\n\n  const onClickIncrement = async () => {\n    setUpdating(true)\n    await execute.increment(connectedWallet)\n    setCount((await query.getCount(connectedWallet)).count)\n    setUpdating(false)\n  }\n\n  const onClickReset = async () => {\n    setUpdating(true)\n    console.log(resetValue)\n    await execute.reset(connectedWallet, resetValue)\n    setCount((await query.getCount(connectedWallet)).count)\n    setUpdating(false)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div style={{ display: 'inline' }}>\n          <h1>\n            COUNT: {count} {updating ? '(updating . . .)' : ''}\n          </h1>\n          <br/>\n          <motion.button whileTap={{scale: 0.8}}  onClick={onClickIncrement} type=\"button\">\n            <img src={\"/cookie.png\"} height={\"100px\"} width={\"100px\"}></img>\n          </motion.button>\n        </div>\n        {status === WalletStatus.WALLET_CONNECTED && (\n          <div style={{ display: 'inline' }}>\n          </div>\n        )}\n        <ConnectWallet />\n      </header>\n    </div>\n  )\n}\n\nexport default App","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { getChainOptions, WalletProvider } from '@terra-money/wallet-provider'\n\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\ngetChainOptions().then((chainOptions) => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <WalletProvider {...chainOptions}>\n        <App />\n      </WalletProvider>\n      ,\n    </React.StrictMode>,\n    document.getElementById('root'),\n  )\n})\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}